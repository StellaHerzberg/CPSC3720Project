{"ast":null,"code":"import fs, { promises } from 'node:fs';\nimport { resolve } from 'node:path';\nimport { Ollama as Ollama$1 } from './browser.mjs';\nimport 'whatwg-fetch';\nclass Ollama extends Ollama$1 {\n  async encodeImage(image) {\n    if (typeof image !== \"string\") {\n      return Buffer.from(image).toString(\"base64\");\n    }\n    try {\n      if (fs.existsSync(image)) {\n        const fileBuffer = await promises.readFile(resolve(image));\n        return Buffer.from(fileBuffer).toString(\"base64\");\n      }\n    } catch {}\n    return image;\n  }\n  /**\n   * checks if a file exists\n   * @param path {string} - The path to the file\n   * @private @internal\n   * @returns {Promise<boolean>} - Whether the file exists or not\n   */\n  async fileExists(path) {\n    try {\n      await promises.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async create(request) {\n    if (request.from && (await this.fileExists(resolve(request.from)))) {\n      throw Error(\"Creating with a local path is not currently supported from ollama-js\");\n    }\n    if (request.stream) {\n      return super.create(request);\n    } else {\n      return super.create(request);\n    }\n  }\n}\nconst index = new Ollama();\nexport { Ollama, index as default };","map":{"version":3,"names":["fs","promises","resolve","Ollama","Ollama$1","encodeImage","image","Buffer","from","toString","existsSync","fileBuffer","readFile","fileExists","path","access","create","request","Error","stream","index","default"],"sources":["C:/Users/epfer/Clemson/CPSC3720/Project/node_modules/ollama/dist/index.mjs"],"sourcesContent":["import fs, { promises } from 'node:fs';\nimport { resolve } from 'node:path';\nimport { Ollama as Ollama$1 } from './browser.mjs';\nimport 'whatwg-fetch';\n\nclass Ollama extends Ollama$1 {\n  async encodeImage(image) {\n    if (typeof image !== \"string\") {\n      return Buffer.from(image).toString(\"base64\");\n    }\n    try {\n      if (fs.existsSync(image)) {\n        const fileBuffer = await promises.readFile(resolve(image));\n        return Buffer.from(fileBuffer).toString(\"base64\");\n      }\n    } catch {\n    }\n    return image;\n  }\n  /**\n   * checks if a file exists\n   * @param path {string} - The path to the file\n   * @private @internal\n   * @returns {Promise<boolean>} - Whether the file exists or not\n   */\n  async fileExists(path) {\n    try {\n      await promises.access(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async create(request) {\n    if (request.from && await this.fileExists(resolve(request.from))) {\n      throw Error(\"Creating with a local path is not currently supported from ollama-js\");\n    }\n    if (request.stream) {\n      return super.create(request);\n    } else {\n      return super.create(request);\n    }\n  }\n}\nconst index = new Ollama();\n\nexport { Ollama, index as default };\n"],"mappings":"AAAA,OAAOA,EAAE,IAAIC,QAAQ,QAAQ,SAAS;AACtC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,MAAM,IAAIC,QAAQ,QAAQ,eAAe;AAClD,OAAO,cAAc;AAErB,MAAMD,MAAM,SAASC,QAAQ,CAAC;EAC5B,MAAMC,WAAWA,CAACC,KAAK,EAAE;IACvB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;IAC9C;IACA,IAAI;MACF,IAAIT,EAAE,CAACU,UAAU,CAACJ,KAAK,CAAC,EAAE;QACxB,MAAMK,UAAU,GAAG,MAAMV,QAAQ,CAACW,QAAQ,CAACV,OAAO,CAACI,KAAK,CAAC,CAAC;QAC1D,OAAOC,MAAM,CAACC,IAAI,CAACG,UAAU,CAAC,CAACF,QAAQ,CAAC,QAAQ,CAAC;MACnD;IACF,CAAC,CAAC,MAAM,CACR;IACA,OAAOH,KAAK;EACd;EACA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMO,UAAUA,CAACC,IAAI,EAAE;IACrB,IAAI;MACF,MAAMb,QAAQ,CAACc,MAAM,CAACD,IAAI,CAAC;MAC3B,OAAO,IAAI;IACb,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF;EACA,MAAME,MAAMA,CAACC,OAAO,EAAE;IACpB,IAAIA,OAAO,CAACT,IAAI,KAAI,MAAM,IAAI,CAACK,UAAU,CAACX,OAAO,CAACe,OAAO,CAACT,IAAI,CAAC,CAAC,GAAE;MAChE,MAAMU,KAAK,CAAC,sEAAsE,CAAC;IACrF;IACA,IAAID,OAAO,CAACE,MAAM,EAAE;MAClB,OAAO,KAAK,CAACH,MAAM,CAACC,OAAO,CAAC;IAC9B,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,MAAM,CAACC,OAAO,CAAC;IAC9B;EACF;AACF;AACA,MAAMG,KAAK,GAAG,IAAIjB,MAAM,CAAC,CAAC;AAE1B,SAASA,MAAM,EAAEiB,KAAK,IAAIC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}