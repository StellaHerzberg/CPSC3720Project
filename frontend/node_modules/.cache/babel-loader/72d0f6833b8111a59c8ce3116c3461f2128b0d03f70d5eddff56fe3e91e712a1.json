{"ast":null,"code":"export const callOllama = async prompt => {\n  try {\n    const response = await fetch('http://localhost:7001/api/llm/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: \"llama3\",\n        prompt: prompt\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Ollama error: $(response.status)`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching from ollama: \", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["callOllama","prompt","response","fetch","method","headers","body","JSON","stringify","model","ok","Error","data","json","error","console"],"sources":["C:/Users/epfer/Clemson/CPSC3720/Project/frontend/src/ollama.js"],"sourcesContent":["\r\nexport const callOllama = async (prompt) => {\r\n    try {\r\n        const response = await fetch('http://localhost:7001/api/llm/parse', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ \r\n            model: \"llama3\",\r\n            prompt: prompt, \r\n        })\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Ollama error: $(response.status)`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n\r\n    }\r\n\r\n    catch (error) {\r\n        console.error(\"Error fetching from ollama: \", error)\r\n        throw error;\r\n    }\r\n    \r\n  }"],"mappings":"AACA,OAAO,MAAMA,UAAU,GAAG,MAAOC,MAAM,IAAK;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,QAAQ;QACfR,MAAM,EAAEA;MACZ,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACvD;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEX,CAAC,CAED,OAAOE,KAAK,EAAE;IACVC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AAEF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}